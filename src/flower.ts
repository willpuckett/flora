import _debug from 'npm:debug@4.3.4'
import * as path from 'https://deno.land/std@0.178.0/path/mod.ts'
import { parse } from 'npm:graphql@16.6.0'
import { codegen } from 'npm:@graphql-codegen/core@3.1.0'
import * as typescriptPlugin from 'npm:@graphql-codegen/typescript@3.0.2'
import * as typescriptOperations from 'npm:@graphql-codegen/typescript-operations@3.0.2'
import * as typescriptGraphqlRequest from 'npm:@graphql-codegen/typescript-graphql-request@4.5.8'
import { globby } from 'npm:globby@13.1.3'
import { getEndpoint } from './util.ts'
import { introspect } from './introspect.ts'
import gqlg from 'npm:gql-generator@1.0.19'

const debug = _debug('flora:fruit')

const config = {
  filename: 'output.ts',
  plugins: [
    // Each plugin should be an object
    {
      typescript: {}, // Here you can pass configuration to the plugin
    },
    { ['typescript-operations']: {} },
    {
      ['typescript-graphql-request']: {},
    },
  ],
  pluginMap: {
    typescript: typescriptPlugin,
    ['typescript-operations']: typescriptOperations,
    ['typescript-graphql-request']: typescriptGraphqlRequest,
  },
}

export const patternMatch = async (
  pattern: string | string[],
  cwd = Deno.cwd(),
) =>
  (await globby(pattern, { cwd, ignore: ['**/node_modules/**', '**/.git/**'] }))
    .map((x) => x.startsWith('/') ? x : path.posix.join(cwd, x))

const locateCache = (file = '') => path.join(Deno.cwd(), `.cache`, file)

const generateOperations = async (schema: string) => {
  debug(`generating operations documents`)
  const schemaFilePath = await Deno.makeTempFile()
  const operationsDir = locateCache()
  //   let operationsDir = Deno.makeTempDirSync()

  await Deno.writeTextFile(schemaFilePath, schema)
  debug(`SchemaTempFile: `, schemaFilePath, `OperationsDir: `, operationsDir)

  gqlg({
    schemaFilePath,
    destDirPath: operationsDir,
    depthLimit: 5,
    fileExtension: 'gql',
  })

  debug(`The operations documents have been auto generated at ${operationsDir}`)
  return operationsDir
}

const generateSdk = async (
  schema: string,
  documentsPattern: string | string[],
) => {
  debug(`Looking for documents matching '${documentsPattern}'`)
  const autoGeneratedDocuments = await patternMatch(
    `**/*.gql`,
    await generateOperations(schema),
  )
  debug(
    `${autoGeneratedDocuments.length} operations documents have been auto generated`,
  )
  debug(`Auto generated documents: `, autoGeneratedDocuments)

  const documents = await Promise.all([
    ...autoGeneratedDocuments,
    ...(await patternMatch(
      Array.isArray(documentsPattern)
        ? documentsPattern
        : documentsPattern.split(','),
    )),
  ].map(async (x) => ({
    location: x,
    document: parse(await Deno.readTextFile(path.resolve(x))),
  })))

  //@ts-expect-error: unhappy with shape
  return await codegen({
    ...config,
    documents,
    schema: parse(schema),
  })
}

const cleanCache = async () => {
  try {
    await Deno.remove(locateCache(), { recursive: true })
  } catch {
    debug(`No cache dir found`)
  }
}

export async function flower() {
  const schemaPattern = '**/[A-Z]*.(graphql|gql)'
  const documentsPattern = '**/[a-z]*.(graphql|gql)'
  debug(`called with:`, { schemaPattern, documentsPattern })

  // const output = locateCache('flora.ts')
  await cleanCache()

  const schema = await introspect()

  debug(`Generating TypeScript SDK`)
  const sdk = `// Temporary workaround for issue microsoft/TypeScript#47663
// Solution found at https://github.com/microsoft/TypeScript/issues/47663#issuecomment-1270716220
import type {} from 'https://esm.sh/graphql@16.6.0';

${
    (await generateSdk(schema!, await documentsPattern))
      .replaceAll(': any,', ': unknown,')
      .replaceAll(': any ', ': unknown ')
      .replaceAll(': any;', ': unknown;')
  }
export type { Dom };

export default function flora({
  secret = Deno.env.get('FLORA_KEY'),
  endpoint = \`${getEndpoint().graphql}/graphql\`,
} = {}) {
  if (!secret) {
    throw new Error('SDK requires a secret to be defined.')
  }

  return getSdk(
    new GraphQLClient(endpoint || 'https://graphql.fauna.com/graphql', {
      headers: {
        authorization: secret && \`Bearer \${secret}\`,
      },
    })
  )
}

export { flora }`

  const output = path.join(Deno.cwd(), `flora`, `flora.ts`)
  cleanCache()

  // await Deno.mkdir(outputDir, { recursive: true })

  await Deno.writeTextFile(output, sdk)
  debug(`The sdk has been stored at ${output}`)

  return output
}
